/**
 * Copyright 2014 Scott Weeden-Moody
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.lillicoder.demo.securelocationservice.task;

import android.os.AsyncTask;
import junit.framework.Assert;

/**
 * Base class for {@link AsyncTask}. This class takes care of handling listener callbacks
 * and makes tasks much easier to work with.
 *
 * @author lillicoder
 */
public abstract class BaseTask<Params, Progress, Result> extends AsyncTask<Params, Progress, Result> {

	private static final String EXCEPTION_INVALID_LISTENER_PARAM = 
		"The given OnTaskCompletedListener must not be null.";
	
	private Exception mException;
	private OnTaskCompletedListener<Result> mListener;
	
	protected BaseTask(OnTaskCompletedListener<Result> listener) {
		if (listener == null) {
			throw new IllegalArgumentException(EXCEPTION_INVALID_LISTENER_PARAM);
        }
		
		mListener = listener;
	}
	
	@Override
	protected void onPreExecute() {
		OnTaskCompletedListener<Result> listener = getListener();
		Assert.assertTrue(listener != null);
		
		listener.onPreExecute();
	}
	
	@Override
	protected void onPostExecute(Result result) {
		OnTaskCompletedListener<Result> listener = getListener();
		Assert.assertTrue(listener != null);
		
		Exception exception = getException();
		if (exception != null)
			// Exception was set, we task has failed execution.
			listener.onFailure(exception);
		else
			// No exception, task has succeeded.
			listener.onSuccess(result);
	}
	
	/**
	 * Gets the exception generated by this task when execution fails.
	 * When this task succeeds or still still running, this value may be <code>null</code>.
	 * @return {@link Exception} generated by this task as a result of failure. 
	 */
	protected Exception getException() {
		return mException;
	}
	
	/**
	 * Gets the task completion listener associated with this task.
	 * @return {@link OnTaskCompletedListener} associated with this task.
	 */
	protected OnTaskCompletedListener<Result> getListener() {
		return mListener;
	}
	
	/**
	 * Sets this task's {@link Exception}. When {@link #doInBackground(Object...)}
	 * completes, this exception will be reported to this task's
	 * {@link OnTaskCompletedListener#onFailure(Exception)} method.
	 * @param exception {@link Exception} to set.
	 */
	protected void setException(Exception exception) {
		mException = exception;
	}
	
}
